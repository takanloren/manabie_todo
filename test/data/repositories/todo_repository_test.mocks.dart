// Mocks generated by Mockito 5.2.0 from annotations
// in manabie_todo/test/data/repositories/todo_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:manabie_todo/common/datasources/local/base_local_datasource.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [BaseLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseLocalDataSource<ModelType> extends _i1.Mock
    implements _i2.BaseLocalDataSource<ModelType> {
  MockBaseLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>> get keys => (super.noSuchMethod(
          Invocation.getter(#keys),
          returnValue: Future<List<String>>.value(<String>[]))
      as _i3.Future<List<String>>);
  @override
  _i3.Future<ModelType?> get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key]),
          returnValue: Future<ModelType?>.value()) as _i3.Future<ModelType?>);
  @override
  _i3.Future<List<ModelType>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: Future<List<ModelType>>.value(<ModelType>[]))
          as _i3.Future<List<ModelType>>);
  @override
  _i3.Future<void> put(String? key, ModelType? value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> putAll(Map<String, ModelType>? items) =>
      (super.noSuchMethod(Invocation.method(#putAll, [items]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> delete(String? key) =>
      (super.noSuchMethod(Invocation.method(#delete, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteAll() =>
      (super.noSuchMethod(Invocation.method(#deleteAll, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<int> add(ModelType? todoModel) =>
      (super.noSuchMethod(Invocation.method(#add, [todoModel]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<void> deleteAtIndex(int? index) =>
      (super.noSuchMethod(Invocation.method(#deleteAtIndex, [index]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
