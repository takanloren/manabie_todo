// Mocks generated by Mockito 5.2.0 from annotations
// in manabie_todo/test/domain/usecases/todo_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:manabie_todo/common/errors/failures.dart' as _i5;
import 'package:manabie_todo/todo_app/data/model/todo_model.dart' as _i6;
import 'package:manabie_todo/todo_app/domain/repositories/todo_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i3.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TodoModel>>> getAllTasks() =>
      (super
          .noSuchMethod(Invocation.method(#getAllTasks, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.TodoModel>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i6.TodoModel>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.TodoModel>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TodoModel>>>
      getIncompleteTasks() => (super.noSuchMethod(
              Invocation.method(#getIncompleteTasks, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.TodoModel>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i6.TodoModel>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TodoModel>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TodoModel>>> getCompleteTasks() =>
      (super.noSuchMethod(Invocation.method(#getCompleteTasks, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.TodoModel>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i6.TodoModel>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TodoModel>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> addTask(_i6.TodoModel? todoModel) =>
      (super.noSuchMethod(Invocation.method(#addTask, [todoModel]),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> updateTask(
          _i6.TodoModel? todoModel) =>
      (super.noSuchMethod(Invocation.method(#updateTask, [todoModel]),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> removeTask(
          _i6.TodoModel? todoModel) =>
      (super.noSuchMethod(Invocation.method(#removeTask, [todoModel]),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
